import{_ as o}from"./index-CqfKCDnJ.js";class h{async getHighestContiguousLeafIndexWithData(){const t=[];for(const e of this.store.keys()){const i=e.match(/^leaf:(\d+):newData$/);if(i){const a=parseInt(i[1],10),r=this.store.get(e);r!=null&&t.push(a)}}if(t.length===0)return-1;t.sort((e,i)=>e-i);let s=-1;for(let e=0;e<t.length&&t[e]===e;e++)s=e;return s}constructor(t){this.store=new Map,this.filePath=t??"./db/cli-accumulator.json"}async put(t,s){this.store.set(t,s)}async get(t){return this.store.get(t)}async delete(t){this.store.delete(t)}async*iterate(t){for(const[s,e]of this.store.entries())s.startsWith(t)&&(yield{key:s,value:e})}async open(){const{promises:t}=await o(async()=>{const{promises:s}=await import("./__vite-browser-external-BIHI7g3E.js");return{promises:s}},[]);try{const s=await t.readFile(this.filePath,"utf8"),e=JSON.parse(s);this.store=new Map(Object.entries(e))}catch(s){if(s.code!=="ENOENT")throw s}}async persist(){const{promises:t}=await o(async()=>{const{promises:i}=await import("./__vite-browser-external-BIHI7g3E.js");return{promises:i}},[]),s=Object.fromEntries(this.store),{dirname:e}=await o(async()=>{const{dirname:i}=await import("./__vite-browser-external-BIHI7g3E.js");return{dirname:i}},[]);await t.mkdir(e(this.filePath),{recursive:!0}),await t.writeFile(this.filePath,JSON.stringify(s),"utf8")}async close(){await this.persist()}async createIndexByPayloadSlice(t,s){const e=new Map;for(const[i,a]of this.store.entries()){if(!i.startsWith("leaf:"))continue;const r=a.slice(t,t+s);e.has(r)||e.set(r,[]),e.get(r).push(a)}return e}}export{h as JSMapAdapter};
